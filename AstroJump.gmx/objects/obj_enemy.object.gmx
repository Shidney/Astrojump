<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spoink</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//states
e_state=e_states.idle;
image_speed=1/(room_speed*1000);

//physics
dir=-1
movespeed=2;
grav=0.2;
hsp=0;
hsp_carry=0;
vsp=0;
fear=0;

//combat
hit=0;
hp_max=1;
hp=hp_max;
pc=0;
vision_close=96;
vision_far=198;
fear_target=noone;
closefear=false;
canEat=true;
eatType=eat.herb;
near_tree=noone;
near_fruit=noone;
near_meat=noone;

//light
glowSize=0.2;
glowColor=c_lime;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Controller
switch(e_state)
{
    case e_states.idle:
    {        
        scr_enemy_normal();
    }
    break;
    case e_states.chase:
    {                              
        scr_enemy_normal(); 
        if(instance_exists(obj_player))
        {
         dir=sign(obj_player.x-x+1); 
        }      
    }
    break;
    case e_states.fear:
    {
        scr_enemy_normal();
        if(instance_exists(fear_target))
        {
            dir=sign(x-fear_target.x+1);   
        }
        else
        {
            dir=sign(x-obj_player.x+1);  
        }     
    } 
    break;
    case e_states.hungry:
    {    
         scr_enemy_eat();
    }
    break;             
}



//Eating System
canEat=false;
if(eatType==eat.herb)
{
near_tree=instance_nearest(x,y,obj_tree);
}
else
{
near_meat=instance_nearest_notme(x,y,obj_enemy);        
}
if(near_tree!=noone)
{
    if(distance_to_object(near_tree)&lt;=vision_close)
    {
        canEat=true;
        near_meat=noone;
    }
}
if(near_meat!=noone)
{
    if(distance_to_object(near_meat)&lt;=vision_close)
    {
        canEat=true;
        near_tree=noone;
        near_fruit=noone;
    }
}

//Case Switcher
if(pc==100)
{
    if(distance_to_object(obj_player)&lt;vision_close)
    {
        if(dir==sign(obj_player.x-x+1))
        {
            e_state = e_states.chase;
        }   
    }
    else if(distance_to_object(obj_player)&gt;vision_far || dir!=sign(obj_player.x-x+1))
    {
        e_state = e_states.idle;
    }
}
else
{
    if(fear_target!=noone)
    {
        closefear =(distance_to_object(fear_target)&lt;vision_close);
    }
    e_state = e_states.idle;

    if(pc&lt;=50 &amp;&amp; (closefear|| (distance_to_object(obj_player)&lt;vision_close)))
    {
        e_state = e_states.fear;
    }
    else if(canEat)
    {
        e_state = e_states.hungry; 
    }
    else
    {
    if(distance_to_object(obj_player)&lt;vision_close)
    {
        if(dir==sign(obj_player.x-x+1))
        {
            e_state = e_states.chase;
        }   
    }
    else if(distance_to_object(obj_player)&gt;vision_far || dir!=sign(obj_player.x-x))
    {
        e_state = e_states.idle;
    }
    }
}

///Hit
if (hit != 0)
{
    hp--;
    hit = 0;
    image_index = 1;       
}

//Drops
if(hp&lt;=0)
{
    drop=choose(0,10);
    if(drop&gt;=0)
    {
        cant=random_range(1,3);
        for(c=1;c&lt;=cant;c++)
        {
                instance_create(x,bbox_bottom,obj_coin);
        }
    }
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Collision       
if(obj_player.y &lt; y-32)
{
    obj_player.vsp=-obj_player.jumpspeed;
    hit=1;
}
else
{      
       dir*=-1;
       e_state=e_states.idle;
       scr_death();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Debug
if(global.debugGeneral || global.debugEntity)
{
    draw_set_color(c_black);
    draw_rectangle(x-sprite_width,y-sprite_height,x+sprite_width,y+sprite_height,1);
    draw_set_color(c_red);
    draw_set_halign(fa_left);
    draw_text(x ,y-vision_close-40,"X:" +string(x)+"#Y:" +string(y)+"#HP:"+string(hp)+" MAX:"+string(hp_max)+" %:"+string(pc)+"#Dir:"+string(dir));
    draw_set_color(c_blue);
    draw_text(x+vision_close,y,"StartVision");
    draw_circle(x,y,vision_close,1);
    draw_set_color(c_green);
    draw_text(x+vision_far,y,"EndVision");
    draw_circle(x,y,vision_far,1);
    if(e_state== e_states.hungry)
    {
    if(instance_exists(near_tree))
    {
      draw_set_colour(c_lime);
      draw_line(x, y, near_tree.x, near_tree.y);     
    }
    if(instance_exists(near_fruit))
    {
      draw_set_colour(c_lime);
      draw_line(x, y, near_fruit.x, near_fruit.y);
    }
    if(instance_exists(near_meat))
    {
    draw_set_colour(c_red);
    draw_line(x, y, near_meat.x, near_meat.y);
    }
    }    
}

//Draw
draw_self();

//draw hit
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_red,hit);

//draw state
switch( e_state)
{
    case e_states.chase:
    {
         draw_set_color(make_color_rgb(255,0,0));
         draw_set_font(fnt_text);
         draw_set_halign(fa_center);
         draw_set_valign(fa_top);
         draw_text(x-1,y-60,"!!!");
    }
    break;
    case e_states.fear:
    {
         draw_set_color(make_color_rgb(255,0,0));
         draw_set_font(fnt_alert);
         draw_set_halign(fa_center);
         draw_set_valign(fa_top);
         draw_text(x-1,y-60,"!");
    }
    break;        
}

//draw life
pc = (hp / hp_max) * 100;
draw_healthbar(x-sprite_width/2, y-sprite_height/2, x+sprite_width, y-sprite_height/2+4, pc, c_black, c_red, c_lime, 0, true, true)
draw_set_font(fnt_text);
draw_set_color(make_color_rgb(255,255,255));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
