<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NightTime Alarm
minValue= 0.0
incrementValue =(1/60)*maxValue;
if(global.alpha&gt;minValue)
{
    global.alpha-=incrementValue;
    alarm[1]=1
    global.Temperature+=0.2;
}
else if(global.alpha&lt;=minValue)
{
    alarm[0]=room_speed*dayLength;
    timer =alarm[0];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DayTime Alarm
maxValue= dayLength/nightLength;
incrementValue =(1/60)*maxValue;
if(global.alpha&lt;maxValue)
{
    global.alpha+=(1/60)*maxValue;
    alarm[0]=1;
    global.Temperature-=0.2;
}
else if(global.alpha&gt;=maxValue)
{
    alarm[1]=room_speed*nightLength;
    timer =alarm[1];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
global.alpha=0;
dayLength=6;
nightLength=60*10;
incrementValue =(1/60)*(dayLength/nightLength);
alarm[0]=room_speed*dayLength;
timer=alarm[0];
//Set surface
CycleSurf= surface_create(room_width,room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(CycleSurf))
{
    CycleSurf= surface_create(room_width,room_height);
}
surface_set_target(CycleSurf);
draw_clear(c_black);

//Glowing Objects
with(obj_torch)
{
    draw_set_blend_mode(bm_src_color);
    draw_sprite_ext(spr_glow,0,x,y,glowSize,glowSize,0,glowColor,1);
    draw_set_blend_mode(bm_normal);
} 

with(obj_player)
{
    draw_set_blend_mode(bm_src_color);
    draw_sprite_ext(spr_glow,0,x,y,glowSize,glowSize,0,glowColor,1);
    draw_set_blend_mode(bm_normal);
} 

with(obj_spotlight)
{
    if(active)
    {
        draw_set_blend_mode(bm_src_color);
        draw_sprite_ext(spr_glow,0,x,y,glowSize,glowSize,0,glowColor,1);
        draw_set_blend_mode(bm_normal);
    }
}
with(obj_basic_input)
{
   if(active)
    {
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_glow,0,x,y,0.02,0.02,0,c_lime,1);
        draw_set_blend_mode(bm_normal);
    }
    else
    {
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_glow,0,x,y,0.02,0.02,0,c_red,1);
        draw_set_blend_mode(bm_normal);
    } 
}
with(obj_enemy)
{
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_glow,0,x,y,glowSize,glowSize,0,glowColor,0.2);
    draw_set_blend_mode(bm_normal);
}
surface_reset_target();
draw_surface_ext(CycleSurf,0,0,1,1,0,c_white,global.alpha);

//Debug
if(global.debugGeneral)
{
    draw_set_color(c_blue);
    draw_text(view_xview+view_wview-140,0,"Alpha: "+string(global.alpha)+"#Timer:"+string(timer)+"#Increment:"+string(incrementValue));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
